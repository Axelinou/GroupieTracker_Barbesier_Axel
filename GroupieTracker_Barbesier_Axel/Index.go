package main

import (
	"encoding/json"
	"fmt"
	"html/template"
	"io"
	"net/http"
	"os"
	"time"
)

var home = template.Must(template.ParseFiles("Html_Css/Index.html"))

type AutoGenerated struct {
	ID                   string `json:"id"`
	Title                string `json:"title"`
	Thumbnail            string `json:"thumbnail"`
	ShortDescription     string `json:"short_description"`
	GameURL              string `json:"game_url"`
	Genre                string `json:"genre"`
	Platform             string `json:"platform"`
	Publisher            string `json:"publisher"`
	Developer            string `json:"developer"`
	ReleaseDate          string `json:"release_date"`
	FreetogameProfileURL string `json:"freetogame_profile_url"`
}

func main() {
	static := http.FileServer(http.Dir("Html_Css"))
	http.Handle("/Html_Css/", http.StripPrefix("/Html_Css/", static))
	http.HandleFunc("/Home", HttpHandlerHome)
	http.ListenAndServe(":80", nil)
}

func HttpHandlerHome(w http.ResponseWriter, r *http.Request) {

	url := "https://www.freetogame.com/api/game?id="
	Input_Utilisateur := r.FormValue("")
	url = url + Input_Utilisateur

	timeClient := http.Client{
		Timeout: time.Second * 2,
	}

	req, err := http.NewRequest(http.MethodGet, url, nil)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	req.Header.Set("User-Agent", "spacecount-total")

	res, getErr := timeClient.Do(req)
	if getErr != nil {
		fmt.Println(getErr)
	}

	if res.Body != nil {
		defer res.Body.Close()
	}

	body, readErr := io.ReadAll(res.Body)
	if readErr != nil {
		fmt.Println(readErr)
	}

	var Temporaire AutoGenerated
	fmt.Sprintln(Temporaire.Genre)
	total := json.Unmarshal(body, &Temporaire)

	if total != nil {
		fmt.Println(Temporaire.Genre)
	}

	var StructId AutoGenerated

	data := AutoGenerated{
		Genre:    fmt.Sprintf(StructId.Genre),
		Title:    fmt.Sprintf(StructId.Title),
		Platform: fmt.Sprintf(StructId.Platform),
	}
	home.Execute(w, data)

}
